/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;
import Metier.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.Set;
import java.util.concurrent.ThreadLocalRandom;
import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
/**
 *
 * @author Hafsa GH
 */
public class MyFutoshikiGame extends javax.swing.JFrame { 
    // ............................. Les variables .............................
    private int dimension = 0; // Dimension choisie par le joueur (4, 5, 6, 7, 8, 9)
    private int dimGrille = 0; // Dimension de maGrille ( = 2 * dimension - 1)
    private int difficulty = 0; // Difficulté du jeu : 1 pour facile et 2 pour compliqué
    private int modele = 0; // Le modèle choisi : 1 pour le modèle 1 et 2 pour le modèle 2
    // --- Récupération des valeurs initiales de la grille avant changement (inchangeables) ---
    private JTextField [][] maGrilleInit; // La grille en totalité (valeurs et contraintes)
    private int [][] valGrilleInit; // Les valeurs
    // --- Récupération des valeurs de la grille après changement (effectués par l'utilisateur) ---
    private JTextField [][] maGrille; // La grille en totalité (valeurs et contraintes)
    private int [][] valGrille; // Les valeurs
    private char [][] contraintesHoriz; // Grille des contraintes horizontales : < et >
    private char [][] contraintesVert; // Grille des contraintes verticales : ^ et v
    private Graph G; // Le graphe du jeu 
    private ST<String, String> config; // Configuration pour résolution avec Backtracking
    
    /**
     * Creates new form MyFutoshikiGame
     */
    public MyFutoshikiGame() {
        initComponents();
        execTxt.setEditable(false);
    }
    
    // --- Getters des grilles ---
    public int [][] getValGrille()
    {
        return this.valGrilleInit;
    }
    public char [][] getContraintesHoriz()
    {
        return this.contraintesHoriz;
    }
    public char [][] getContraintesVert()
    {
        return this.contraintesVert;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contentPane = new javax.swing.JPanel();
        dimensionGameCB = new javax.swing.JComboBox<>();
        Choose = new javax.swing.JButton();
        grille = new javax.swing.JPanel();
        solutionBtn = new javax.swing.JButton();
        verifyBtn = new javax.swing.JButton();
        restartBtn = new javax.swing.JButton();
        modeleCB = new javax.swing.JComboBox<>();
        difficultyCB = new javax.swing.JComboBox<>();
        showOneCaseBtn = new javax.swing.JButton();
        typeVariableCB = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        typeDomaineCB = new javax.swing.JComboBox<>();
        typeAlgoCB = new javax.swing.JComboBox<>();
        execLbl = new javax.swing.JLabel();
        execTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Futoshiki");
        setBackground(new java.awt.Color(255, 204, 255));
        setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N

        contentPane.setBackground(new java.awt.Color(255, 239, 255));
        contentPane.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N

        dimensionGameCB.setBackground(new java.awt.Color(204, 255, 255));
        dimensionGameCB.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        dimensionGameCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "4x4", "5x5", "6x6", "7x7", "8x8" }));
        dimensionGameCB.setToolTipText("Sélectionner la taille de la grille ...");
        dimensionGameCB.setMinimumSize(new java.awt.Dimension(57, 30));
        dimensionGameCB.setPreferredSize(new java.awt.Dimension(57, 34));

        Choose.setBackground(new java.awt.Color(204, 255, 255));
        Choose.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        Choose.setText("Jouer");
        Choose.setToolTipText("Cliquer ici pour générer la grille ...");
        Choose.setActionCommand("Choose");
        Choose.setMaximumSize(new java.awt.Dimension(72, 36));
        Choose.setMinimumSize(new java.awt.Dimension(72, 36));
        Choose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseActionPerformed(evt);
            }
        });

        grille.setBackground(new java.awt.Color(231, 255, 231));
        grille.setPreferredSize(new java.awt.Dimension(460, 460));

        javax.swing.GroupLayout grilleLayout = new javax.swing.GroupLayout(grille);
        grille.setLayout(grilleLayout);
        grilleLayout.setHorizontalGroup(
            grilleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 460, Short.MAX_VALUE)
        );
        grilleLayout.setVerticalGroup(
            grilleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 460, Short.MAX_VALUE)
        );

        solutionBtn.setBackground(new java.awt.Color(204, 255, 255));
        solutionBtn.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        solutionBtn.setText("Afficher la solution");
        solutionBtn.setToolTipText("Cliquer ici pour afficher la solution ...");
        solutionBtn.setEnabled(false);
        solutionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solutionBtnActionPerformed(evt);
            }
        });

        verifyBtn.setBackground(new java.awt.Color(204, 255, 255));
        verifyBtn.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        verifyBtn.setText("Vérifier ma solution");
        verifyBtn.setToolTipText("Cliquer ici pour vérifier votre réponse ...");
        verifyBtn.setEnabled(false);
        verifyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verifyBtnActionPerformed(evt);
            }
        });

        restartBtn.setBackground(new java.awt.Color(204, 255, 255));
        restartBtn.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        restartBtn.setText("Recommencer");
        restartBtn.setToolTipText("Cliquer ici pour recommencer ...");
        restartBtn.setEnabled(false);
        restartBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartBtnActionPerformed(evt);
            }
        });

        modeleCB.setBackground(new java.awt.Color(204, 255, 255));
        modeleCB.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        modeleCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Modèle 1", "Modèle 2" }));
        modeleCB.setToolTipText("Choisir un modèle ...");
        modeleCB.setMinimumSize(new java.awt.Dimension(97, 34));

        difficultyCB.setBackground(new java.awt.Color(204, 255, 255));
        difficultyCB.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        difficultyCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Facile", "Compliqué" }));
        difficultyCB.setToolTipText("Sélectionner la difficulté du jeu souhaitée ...");
        difficultyCB.setMinimumSize(new java.awt.Dimension(108, 34));

        showOneCaseBtn.setBackground(new java.awt.Color(204, 255, 255));
        showOneCaseBtn.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        showOneCaseBtn.setText("Afficher une case");
        showOneCaseBtn.setToolTipText("Cliquer ici pour afficher la valeur d'une case ...");
        showOneCaseBtn.setEnabled(false);
        showOneCaseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showOneCaseBtnActionPerformed(evt);
            }
        });

        typeVariableCB.setBackground(new java.awt.Color(204, 255, 255));
        typeVariableCB.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        typeVariableCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Simple", "Degree", "MVR", "DegreeMVR" }));
        typeVariableCB.setToolTipText("Sélection de la variable ...");
        typeVariableCB.setMinimumSize(new java.awt.Dimension(100, 34));
        typeVariableCB.setPreferredSize(new java.awt.Dimension(115, 29));

        jLabel1.setFont(new java.awt.Font("Bookman Old Style", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 0, 0));
        jLabel1.setText("Futoshiki");

        typeDomaineCB.setBackground(new java.awt.Color(204, 255, 255));
        typeDomaineCB.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        typeDomaineCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Simple", "LCV" }));
        typeDomaineCB.setToolTipText("Sélection du domaine ...");
        typeDomaineCB.setPreferredSize(new java.awt.Dimension(80, 34));

        typeAlgoCB.setBackground(new java.awt.Color(204, 255, 255));
        typeAlgoCB.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        typeAlgoCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Simple", "FC", "AC1" }));
        typeAlgoCB.setToolTipText("Type de l'algorithme ...");
        typeAlgoCB.setMinimumSize(new java.awt.Dimension(64, 29));

        execLbl.setFont(new java.awt.Font("Bookman Old Style", 1, 12)); // NOI18N
        execLbl.setForeground(new java.awt.Color(204, 0, 51));
        execLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        execLbl.setText("Temps d'exécution");
        execLbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        execTxt.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        execTxt.setForeground(new java.awt.Color(204, 0, 51));
        execTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        execTxt.setToolTipText("Temps d'exécution de la solution ...");

        javax.swing.GroupLayout contentPaneLayout = new javax.swing.GroupLayout(contentPane);
        contentPane.setLayout(contentPaneLayout);
        contentPaneLayout.setHorizontalGroup(
            contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contentPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(contentPaneLayout.createSequentialGroup()
                        .addComponent(grille, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(contentPaneLayout.createSequentialGroup()
                                .addComponent(typeVariableCB, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(typeDomaineCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(typeAlgoCB, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(contentPaneLayout.createSequentialGroup()
                                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(verifyBtn)
                                    .addComponent(solutionBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contentPaneLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(showOneCaseBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contentPaneLayout.createSequentialGroup()
                                        .addComponent(restartBtn)
                                        .addGap(19, 19, 19))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contentPaneLayout.createSequentialGroup()
                                        .addComponent(execLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(9, 9, 9))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contentPaneLayout.createSequentialGroup()
                                        .addComponent(execTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(33, 33, 33))))))
                    .addGroup(contentPaneLayout.createSequentialGroup()
                        .addComponent(dimensionGameCB, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(difficultyCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(modeleCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Choose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        contentPaneLayout.setVerticalGroup(
            contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPaneLayout.createSequentialGroup()
                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(contentPaneLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(difficultyCB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contentPaneLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(Choose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(contentPaneLayout.createSequentialGroup()
                                .addComponent(dimensionGameCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(modeleCB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(contentPaneLayout.createSequentialGroup()
                        .addComponent(verifyBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(typeVariableCB, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(typeDomaineCB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(typeAlgoCB, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(solutionBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(showOneCaseBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(restartBtn)
                        .addGap(49, 49, 49)
                        .addComponent(execLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(execTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(124, 124, 124))
                    .addGroup(contentPaneLayout.createSequentialGroup()
                        .addComponent(grille, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contentPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contentPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // --- Bouton "jouer" pour initialiser et afficher la grille ---
    private void ChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChooseActionPerformed
        // --- On récupère le choix de la taille de la grille à partir de la ComboBox : dimensionGameCB ---
        int indexTaille = dimensionGameCB.getSelectedIndex();       
        switch (indexTaille) {
            case 0:
                dimension = 4;
                break;
            case 1:
                dimension = 5;
                break;
            case 2:
                dimension = 6;
                break;
            case 3:
                dimension = 7;
                break;
            case 4:
                dimension = 8;
                break;
            default:
                break;
        }
        // --- On récupère le choix de la difficulté du jeu à partir de la ComboBox : difficultyCB ---
        int indexDifficulty = difficultyCB.getSelectedIndex();
        switch(indexDifficulty) {
            case 0:
                difficulty = 1; // Choix facile
                break;
            case 1:
                difficulty = 2; // Choix compliqué
                break;
        }
        // --- On récupère le modèle choisi à partir de la ComboBox : modeleCB ---
        int indexModele = modeleCB.getSelectedIndex();
        switch(indexModele) {
            case 0:
                modele = 1; // Modèle 1
                break;
            case 1:
                modele = 2; // Modèle 2
                break;
        }
        dimGrille = 2 * dimension - 1;
        maGrille = new JTextField [dimGrille][dimGrille];
        maGrilleInit = new JTextField [dimGrille][dimGrille];
        // --- Initialisation des cases des grilles ---
        for(int i = 0; i < dimGrille; i++)
        {
            for(int j = 0; j < dimGrille; j++)
            {
                maGrille[i][j] = new JTextField();
                maGrilleInit[i][j] = new JTextField();
            }
        }
        // --- Remplissage des contraintes ---
        switch(dimension) {
            // --- Cas du choix de la taille 4x4 ---
            case 4:
                // --- Facile ---
                if(difficulty == 1)
                {
                    // --- Modèle 1 ---
                    if(modele == 1)
                    {
                        maGrille[1][0].setText("v");
                        maGrille[1][2].setText("v");
                        maGrille[4][3].setText(">");
                        maGrille[5][6].setText("^");
                        maGrille[6][1].setText(">");
                        maGrille[6][3].setText(">");
                    }
                    // --- Modèle 2 ---
                    else if(modele == 2)
                    {
                        maGrille[0][0].setText("4");
                        maGrille[0][0].setEditable(false);
                        maGrille[0][3].setText("<");
                        maGrille[3][2].setText("v");
                        maGrille[3][4].setText("^");
                        maGrille[6][1].setText(">");
                        maGrille[6][6].setText("1");
                        maGrille[6][6].setEditable(false);
                    }
                }
                // --- Compliqué ---
                else if (difficulty == 2)
                {
                    // --- Modèle 1 ---
                    if(modele == 1)
                    {
                        maGrille[0][6].setText("3");
                        maGrille[0][6].setEditable(false);
                        maGrille[1][0].setText("^");
                        maGrille[3][0].setText("^");
                        maGrille[5][4].setText("v");
                        maGrille[5][6].setText("^");
                        maGrille[6][3].setText("<");
                    }
                    // --- Modèle 2 ---
                    else if(modele == 2)
                    {
                        maGrille[0][1].setText(">");
                        maGrille[1][0].setText("^");
                        maGrille[1][6].setText("v");
                        maGrille[3][2].setText("v");
                        maGrille[3][6].setText("v");
                        maGrille[6][5].setText(">");
                    }
                }
                break;
            // --- Cas du choix de la taille 5x5 ---
            case 5:
                // --- Facile ---
                if(difficulty == 1)
                {
                    // --- Modèle 1 ---
                    if(modele == 1)
                    {
                        maGrille[1][0].setText("v");
                        maGrille[1][4].setText("v");
                        maGrille[2][3].setText("<");
                        maGrille[4][7].setText("<");
                        maGrille[6][3].setText(">");
                        maGrille[6][5].setText(">");
                        maGrille[7][6].setText("v");
                        maGrille[8][3].setText(">");
                        maGrille[8][7].setText(">");
                    }
                    // --- Modèle 2 ---
                    else if(modele == 2)
                    {
                        maGrille[0][0].setText("2");
                        maGrille[0][0].setEditable(false);
                        maGrille[1][2].setText("^");
                        maGrille[2][2].setText("3");
                        maGrille[2][2].setEditable(false);
                        maGrille[2][7].setText("<");
                        maGrille[6][1].setText(">");
                        maGrille[7][0].setText("^");
                        maGrille[7][4].setText("v");
                        maGrille[7][8].setText("v");
                        maGrille[8][0].setText("4");
                        maGrille[8][0].setEditable(false);
                        maGrille[8][5].setText(">");
                    }
                }
                // --- Compliqué ---
                else if (difficulty == 2)
                {
                    // --- Modèle 1 ---
                    if(modele == 1)
                    {
                        maGrille[0][0].setText("1");
                        maGrille[0][0].setEditable(false);
                        maGrille[1][4].setText("^");
                        maGrille[1][6].setText("^");
                        maGrille[4][1].setText("<");
                        maGrille[6][1].setText("<");
                        maGrille[6][7].setText(">");
                        maGrille[7][2].setText("^");
                        maGrille[8][7].setText(">");
                    }
                    // --- Modèle 2 ---
                    else if(modele == 2)
                    {
                        maGrille[0][1].setText(">");
                        maGrille[1][0].setText("^");
                        maGrille[2][1].setText("<");
                        maGrille[2][7].setText(">");
                        maGrille[3][4].setText("^");
                        maGrille[4][4].setText("3");
                        maGrille[4][4].setEditable(false);
                        maGrille[4][7].setText(">");
                        maGrille[5][0].setText("^");
                        maGrille[7][0].setText("^");
                        maGrille[7][4].setText("^");
                        maGrille[7][6].setText("^");
                    }
                }
                break;
            // --- Cas du choix de la taille 6x6 ---
            case 6:
                // --- Facile ---
                if(difficulty == 1)
                {
                    // --- Modèle 1 ---
                    if(modele == 1)
                    {
                        maGrille[0][0].setText("5");
                        maGrille[0][0].setEditable(false);
                        maGrille[0][7].setText(">");
                        maGrille[1][10].setText("v");
                        maGrille[2][3].setText(">");
                        maGrille[3][2].setText("v");
                        maGrille[4][3].setText(">");
                        maGrille[4][5].setText(">");
                        maGrille[5][10].setText("^");
                        maGrille[7][6].setText("v");
                        maGrille[8][2].setText("5");
                        maGrille[8][2].setEditable(false);
                        maGrille[8][3].setText(">");
                        maGrille[8][9].setText("<");
                        maGrille[9][4].setText("v");
                        maGrille[9][10].setText("^");
                        maGrille[10][9].setText("<");
                    }
                    // --- Modèle 2 ---
                    else if(modele == 2)
                    {
                        maGrille[0][0].setText("3");
                        maGrille[0][0].setEditable(false);
                        maGrille[0][9].setText("<");
                        maGrille[1][0].setText("^");
                        maGrille[2][1].setText("<");
                        maGrille[2][5].setText(">");
                        maGrille[2][7].setText(">");
                        maGrille[3][8].setText("^");
                        maGrille[4][3].setText(">");
                        maGrille[4][7].setText(">");
                        maGrille[5][2].setText("^");
                        maGrille[5][4].setText("v");
                        maGrille[6][0].setText("4");
                        maGrille[6][0].setEditable(false);
                        maGrille[8][7].setText("<");
                        maGrille[9][2].setText("^");
                        maGrille[9][10].setText("^");
                        maGrille[10][3].setText("<");
                        maGrille[10][7].setText(">");
                        maGrille[10][8].setText("3");
                        maGrille[10][8].setEditable(false);
                    }
                }
                // --- Compliqué ---
                else if (difficulty == 2)
                {
                    // --- Modèle 1 ---
                    if(modele == 1)
                    {
                        maGrille[0][3].setText(">");
                        maGrille[1][0].setText("^");
                        maGrille[1][6].setText("v");
                        maGrille[1][10].setText("^");
                        maGrille[3][8].setText("^");
                        maGrille[4][1].setText("<");
                        maGrille[5][0].setText("v");
                        maGrille[5][10].setText("^");
                        maGrille[6][4].setText("4");
                        maGrille[6][4].setEditable(false);
                        maGrille[6][5].setText("<");
                        maGrille[6][8].setText("5");
                        maGrille[6][8].setEditable(false);
                        maGrille[7][4].setText("^");
                        maGrille[7][10].setText("v");
                        maGrille[8][7].setText("<");
                        maGrille[10][0].setText("3");
                        maGrille[10][0].setEditable(false);
                        maGrille[10][5].setText(">");
                        maGrille[10][9].setText(">");
                    }
                    // --- Modèle 2 ---
                    else if(modele == 2)
                    {
                        maGrille[0][3].setText(">");
                        maGrille[0][6].setText("4");
                        maGrille[0][6].setEditable(false);
                        maGrille[1][2].setText("^");
                        maGrille[1][4].setText("^");
                        maGrille[2][9].setText(">");
                        maGrille[3][6].setText("v");
                        maGrille[3][8].setText("^");
                        maGrille[3][10].setText("v");
                        maGrille[5][0].setText("^");
                        maGrille[5][4].setText("v");
                        maGrille[5][6].setText("v");
                        maGrille[7][6].setText("^");
                        maGrille[8][7].setText("<");
                        maGrille[10][6].setText("2");
                        maGrille[10][6].setEditable(false);
                        maGrille[10][7].setText("<");
                        maGrille[10][9].setText("<");
                        maGrille[10][10].setText("4");
                        maGrille[10][10].setEditable(false);
                    }
                }
                break;
            // --- Cas du choix de la taille 7x7 ---
            case 7:
                // --- Facile ---
                if(difficulty == 1)
                {
                    // --- Modèle 1 ---
                    if(modele == 1)
                    {
                        maGrille[0][0].setText("1");
                        maGrille[0][0].setEditable(false);
                        maGrille[0][3].setText(">");
                        maGrille[0][5].setText("<");
                        maGrille[0][11].setText(">");
                        maGrille[1][6].setText("v");
                        maGrille[1][8].setText("v");
                        maGrille[1][12].setText("v");
                        maGrille[3][2].setText("^");
                        maGrille[4][4].setText("3");
                        maGrille[4][4].setEditable(false);
                        maGrille[4][7].setText("<");
                        maGrille[5][6].setText("v");
                        maGrille[5][10].setText("v");
                        maGrille[6][11].setText(">");
                        maGrille[7][6].setText("v");
                        maGrille[8][3].setText("<");
                        maGrille[8][9].setText(">");
                        maGrille[10][9].setText("<");
                        maGrille[11][12].setText("^");
                        maGrille[12][5].setText(">");
                        maGrille[12][6].setText("3");
                        maGrille[12][6].setEditable(false);
                        maGrille[12][8].setText("5");
                        maGrille[12][8].setEditable(false);
                        maGrille[12][10].setText("2");
                        maGrille[12][10].setEditable(false);
                        maGrille[12][12].setText("4");
                        maGrille[12][12].setEditable(false);
                    }
                    // --- Modèle 2 ---
                    else if(modele == 2)
                    {
                        maGrille[0][0].setText("4");
                        maGrille[0][0].setEditable(false);
                        maGrille[0][4].setText("5");
                        maGrille[0][4].setEditable(false);
                        maGrille[0][9].setText("<");
                        maGrille[0][11].setText(">");
                        maGrille[1][2].setText("^");
                        maGrille[1][8].setText("v");
                        maGrille[1][10].setText("^");
                        maGrille[3][2].setText("v");
                        maGrille[3][4].setText("^");
                        maGrille[3][6].setText("^");
                        maGrille[4][4].setText("2");
                        maGrille[4][4].setEditable(false);
                        maGrille[4][7].setText("<");
                        maGrille[5][0].setText("^");
                        maGrille[6][1].setText("<");
                        maGrille[6][2].setText("5");
                        maGrille[6][2].setEditable(false);
                        maGrille[7][0].setText("v");
                        maGrille[7][10].setText("v");
                        maGrille[8][11].setText(">");
                        maGrille[11][6].setText("^");
                        maGrille[11][12].setText("^");
                        maGrille[12][5].setText(">");
                        maGrille[12][8].setText("6");
                        maGrille[12][8].setEditable(false);
                    }
                }
                // --- Compliqué ---
                else if (difficulty == 2)
                {
                    // --- Modèle 1 ---
                    if(modele == 1)
                    {
                        maGrille[0][8].setText("6");
                        maGrille[0][8].setEditable(false);
                        maGrille[1][0].setText("v");
                        maGrille[2][3].setText("<");
                        maGrille[2][6].setText("3");
                        maGrille[2][6].setEditable(false);
                        maGrille[2][7].setText(">");
                        maGrille[2][9].setText(">");
                        maGrille[3][8].setText("v");
                        maGrille[4][1].setText(">");
                        maGrille[4][2].setText("5");
                        maGrille[4][2].setEditable(false);
                        maGrille[4][11].setText(">");
                        maGrille[5][6].setText("^");
                        maGrille[6][5].setText(">");
                        maGrille[6][8].setText("5");
                        maGrille[6][8].setEditable(false);
                        maGrille[6][10].setText("2");
                        maGrille[6][10].setEditable(false);
                        maGrille[7][12].setText("v");
                        maGrille[9][8].setText("^");
                        maGrille[10][1].setText(">");
                        maGrille[10][9].setText("<");
                        maGrille[11][2].setText("v");
                        maGrille[12][3].setText(">");
                    }
                    // --- Modèle 2 ---
                    else if(modele == 2)
                    {
                        maGrille[0][8].setText("4");
                        maGrille[0][8].setEditable(false);
                        maGrille[0][9].setText("<");
                        maGrille[1][0].setText("v");
                        maGrille[2][2].setText("3");
                        maGrille[2][2].setEditable(false);
                        maGrille[2][5].setText("<");
                        maGrille[3][8].setText("^");
                        maGrille[4][0].setText("6");
                        maGrille[4][0].setEditable(false);
                        maGrille[4][1].setText(">");
                        maGrille[4][4].setText("1");
                        maGrille[4][4].setEditable(false);
                        maGrille[4][7].setText(">");
                        maGrille[6][3].setText(">");
                        maGrille[7][8].setText("^");
                        maGrille[8][7].setText(">");
                        maGrille[9][8].setText("v");
                        maGrille[10][2].setText("5");
                        maGrille[10][2].setEditable(false);
                        maGrille[10][7].setText("<");
                        maGrille[11][4].setText("^");
                        maGrille[11][10].setText("^");
                        maGrille[12][0].setText("4");
                        maGrille[12][0].setEditable(false);
                        maGrille[12][11].setText("<");
                    }
                }
                break;
            // --- Cas du choix de la taille 8x8 ---
            case 8:
                // --- Facile ---
                if(difficulty == 1)
                {
                    // --- Modèle 1 ---
                    if(modele == 1)
                    {
                        maGrille[0][1].setText("<");
                        maGrille[1][8].setText("^");
                        maGrille[1][14].setText("v");
                        maGrille[2][2].setText("4");
                        maGrille[2][2].setEditable(false);
                        maGrille[2][8].setText("3");
                        maGrille[2][8].setEditable(false);
                        maGrille[2][11].setText(">");
                        maGrille[2][14].setText("7");
                        maGrille[2][14].setEditable(false);
                        maGrille[3][2].setText("v");
                        maGrille[3][10].setText("^");
                        maGrille[4][0].setText("2");
                        maGrille[4][0].setEditable(false);
                        maGrille[4][1].setText("<");
                        maGrille[4][3].setText("<");
                        maGrille[4][9].setText(">");
                        maGrille[4][14].setText("5");
                        maGrille[4][14].setEditable(false);
                        maGrille[6][0].setText("6");
                        maGrille[6][0].setEditable(false);
                        maGrille[6][9].setText(">");
                        maGrille[7][8].setText("^");
                        maGrille[7][14].setText("v");
                        maGrille[8][1].setText(">");
                        maGrille[8][3].setText(">");
                        maGrille[8][11].setText("<");
                        maGrille[9][8].setText("v");
                        maGrille[10][1].setText(">");
                        maGrille[10][11].setText(">");
                        maGrille[11][0].setText("^");
                        maGrille[12][8].setText("6");
                        maGrille[12][8].setEditable(false);
                        maGrille[12][9].setText("<");
                        maGrille[12][11].setText("<");
                        maGrille[12][14].setText("3");
                        maGrille[12][14].setEditable(false);
                        maGrille[13][6].setText("^");
                        maGrille[13][8].setText("^");
                        maGrille[13][14].setText("v");
                        maGrille[14][9].setText("<");
                    }
                    // --- Modèle 2 ---
                    else if(modele == 2)
                    {
                        maGrille[0][1].setText("<");
                        maGrille[0][5].setText("<");
                        maGrille[0][9].setText("<");
                        maGrille[1][10].setText("^");
                        maGrille[2][0].setText("2");
                        maGrille[2][0].setEditable(false);
                        maGrille[2][1].setText("<");
                        maGrille[2][13].setText(">");
                        maGrille[3][2].setText("^");
                        maGrille[3][14].setText("v");
                        maGrille[4][0].setText("7");
                        maGrille[4][0].setEditable(false);
                        maGrille[5][4].setText("^");
                        maGrille[5][14].setText("v");
                        maGrille[6][1].setText("<");
                        maGrille[6][3].setText(">");
                        maGrille[6][7].setText(">");
                        maGrille[6][11].setText(">");
                        maGrille[7][0].setText("v");
                        maGrille[8][1].setText("<");
                        maGrille[8][3].setText("<");
                        maGrille[8][13].setText("<");
                        maGrille[9][0].setText("v");
                        maGrille[9][10].setText("v");
                        maGrille[9][14].setText("^");
                        maGrille[10][1].setText(">");
                        maGrille[10][3].setText("<");
                        maGrille[10][11].setText(">");
                        maGrille[11][2].setText("v");
                        maGrille[11][4].setText("^");
                        maGrille[11][6].setText("v");
                        maGrille[11][12].setText("v");
                        maGrille[12][11].setText(">");
                        maGrille[13][6].setText("^");
                        maGrille[13][12].setText("^");
                        maGrille[13][14].setText("^");
                        maGrille[14][1].setText("<");
                        maGrille[14][11].setText(">");
                    }
                }
                // --- Compliqué ---
                else if (difficulty == 2)
                {
                    // --- Modèle 1 ---
                    if(modele == 1)
                    {
                        maGrille[0][1].setText(">");
                        maGrille[1][14].setText("v");
                        maGrille[2][5].setText(">");
                        maGrille[3][0].setText("^");
                        maGrille[3][4].setText("^");
                        maGrille[4][4].setText("6");
                        maGrille[4][4].setEditable(false);
                        maGrille[4][5].setText(">");
                        maGrille[4][10].setText("4");
                        maGrille[4][10].setEditable(false);
                        maGrille[5][10].setText("^");
                        maGrille[5][12].setText("^");
                        maGrille[6][2].setText("5");
                        maGrille[6][2].setEditable(false);
                        maGrille[6][7].setText("<");
                        maGrille[7][0].setText("v");
                        maGrille[7][8].setText("^");
                        maGrille[7][10].setText("^");
                        maGrille[7][14].setText("v");
                        maGrille[8][0].setText("7");
                        maGrille[8][0].setEditable(false);
                        maGrille[8][3].setText(">");
                        maGrille[8][14].setText("6");
                        maGrille[8][14].setEditable(false);
                        maGrille[10][3].setText("<");
                        maGrille[11][0].setText("^");
                        maGrille[11][6].setText("^");
                        maGrille[11][10].setText("^");
                        maGrille[12][0].setText("4");
                        maGrille[12][0].setEditable(false);
                        maGrille[12][1].setText(">");
                        maGrille[12][3].setText(">");
                        maGrille[13][0].setText("v");
                        maGrille[13][10].setText("^");
                        maGrille[13][12].setText("v");
                        maGrille[14][2].setText("7");
                        maGrille[14][2].setEditable(false);
                        maGrille[14][4].setText("5");
                        maGrille[14][4].setEditable(false);
                        maGrille[14][14].setText("1");
                        maGrille[14][14].setEditable(false);
                    }
                    // --- Modèle 2 ---
                    else if(modele == 2)
                    {
                        maGrille[0][1].setText("<");
                        maGrille[0][8].setText("7");
                        maGrille[0][8].setEditable(false);
                        maGrille[0][12].setText("5");
                        maGrille[0][12].setEditable(false);
                        maGrille[0][14].setText("2");
                        maGrille[0][14].setEditable(false);
                        maGrille[2][5].setText(">");
                        maGrille[2][11].setText(">");
                        maGrille[2][13].setText(">");
                        maGrille[3][0].setText("v");
                        maGrille[3][2].setText("v");
                        maGrille[3][6].setText("v");
                        maGrille[4][1].setText("<");
                        maGrille[4][7].setText(">");
                        maGrille[4][14].setText("5");
                        maGrille[4][14].setEditable(false);
                        maGrille[5][14].setText("^");
                        maGrille[6][6].setText("7");
                        maGrille[6][6].setEditable(false);
                        maGrille[7][10].setText("v");
                        maGrille[8][5].setText("<");
                        maGrille[8][6].setText("3");
                        maGrille[8][6].setEditable(false);
                        maGrille[8][9].setText("<");
                        maGrille[9][0].setText("^");
                        maGrille[9][2].setText("^");
                        maGrille[9][14].setText("^");
                        maGrille[10][5].setText("<");
                        maGrille[10][11].setText("<");
                        maGrille[12][6].setText("4");
                        maGrille[12][6].setEditable(false);
                        maGrille[12][11].setText("<");
                        maGrille[12][13].setText("<");
                        maGrille[13][14].setText("^");
                        maGrille[14][3].setText(">");
                        maGrille[14][7].setText(">");
                        maGrille[14][9].setText("<");
                    }
                }
                break;
        }
        // --- Remplir la matrice initiale ---
        for(int i = 0; i < dimGrille; i++)
        {
            for(int j = 0; j < dimGrille; j++)
            {
                maGrilleInit[i][j].setText(maGrille[i][j].getText());
            }
        }
        // --- Initialisation des matrices des valeurs et des contraintes ---
        valGrille = new int[dimension][dimension];
        contraintesHoriz = new char[dimension][dimension - 1];
        contraintesVert = new char[dimension - 1][dimension];
        
        valGrilleInit = new int[dimension][dimension];
        // ------------------------------------------------------------------------
        for(int i = 0; i < dimGrille; i++)
        {
            for(int j = 0; j < dimGrille; j++)
            {
                if(!maGrille[i][j].getText().equals(""))
                {
                    // --- Les valeurs ---
                    if(i % 2 == 0 && j % 2 == 0)
                    {
                        try {
                            int val = Integer.parseInt(maGrille[i][j].getText());
                            valGrille[i/2][j/2] = val;
                            valGrilleInit[i/2][j/2] = val;
                        }
                        catch(NumberFormatException ex) {
                            ex.printStackTrace();
                        }
                    }
                    // --- Les contraintes horizontales : < et > ---
                    else if(i % 2 == 0 && j % 2 != 0)
                    {
                        char cHoriz = maGrille[i][j].getText().charAt(0);
                        contraintesHoriz[i/2][(j-1)/2] = cHoriz;
                    }
                    // ---- Les contraintes verticales : ^ et v ---
                    else if(i % 2 != 0 && j % 2 == 0)
                    {
                        char cVert = maGrille[i][j].getText().charAt(0);
                        contraintesVert[(i-1)/2][j/2] = cVert;
                    }
                }
            }
        }
        // --- On efface le panel avant de créer une nouvlle grille ainsi que le temps d'exécution ---
        grille.removeAll();
        execTxt.setText("");
        grille.repaint();
        // --- Changement de la taille du panel contenant la grille en fonction de la taille choisi ---
        switch(dimension) {
            case 4:
                grille.setBounds(grille.getX(), grille.getY(), 220, 220);         
                break;
            case 5:
                grille.setBounds(grille.getX(), grille.getY(), 280, 280);
                break;
            case 6:
                grille.setBounds(grille.getX(), grille.getY(), 340, 340);
                break;
            case 7:
                grille.setBounds(grille.getX(), grille.getY(), 400, 400);
                break;
            case 8:
                grille.setBounds(grille.getX(), grille.getY(), 460, 460);
                break;  
        }
        
        // --- Affichage de la grille ---
        for(int i = 0; i < dimGrille; i++)
        {
            for(int j = 0; j < dimGrille; j++)
            {
                maGrille[i][j].setHorizontalAlignment(JTextField.CENTER);
                grille.add(maGrille[i][j]);
                if(i % 2 == 0 && j % 2 == 0)
                {
                    maGrille[i][j].setBounds(j * 30, i * 30, 40, 40);
                    maGrille[i][j].setFont(new Font("Bookman Old Style", Font.BOLD, 24));
                    maGrille[i][j].setForeground(Color.black);
                    // --- 
                    JTextField text = maGrille[i][j];
                    // --- Listener sur chaque case des valeurs pour vérifier la valeur saisie dans la case ---
                    maGrille[i][j].addKeyListener(new KeyAdapter() {
                         public void keyTyped(KeyEvent e) {
                             char ch = e.getKeyChar();
                             // --- Si la valeur est < à 0 ou > à la valeur maximale ---
                             if(((ch < '1') || (ch > (char)(dimension+'0'))) && (ch != KeyEvent.VK_BACK_SPACE))
                                 text.setForeground(Color.red);
                             else
                                 text.setForeground(Color.black);
                        }
                    });
                }
                else
                {
                    maGrille[i][j].setBounds(j * 30 + 5, i * 30 + 5, 30, 30);
                    maGrille[i][j].setFont(new Font("", Font.PLAIN, 24));
                    maGrille[i][j].setEditable(false);
                }
                if (i % 2 != 0 && j % 2 != 0)
                    maGrille[i][j].setVisible(false);
            }
        }
        solutionBtn.setEnabled(true);
        verifyBtn.setEnabled(true);
        showOneCaseBtn.setEnabled(true);
        restartBtn.setEnabled(true);
    }//GEN-LAST:event_ChooseActionPerformed
    // --- Méthode de récupération des valeurs à partir de la grille ---
    public void setElements(JTextField [][] grille)
    {
        // --- On récupère ce qui est inséré dans la grille ---
        for(int i = 0; i < dimGrille; i++)
        {
            for(int j = 0; j < dimGrille; j++)
            {
                if(!grille[i][j].getText().equals(""))
                {
                    if(i % 2 == 0 && j % 2 == 0)
                    {
                        try {
                            int val = Integer.parseInt(grille[i][j].getText());
                            valGrille[i/2][j/2] = val;
                        }
                        catch(NumberFormatException ex) {
                            ex.printStackTrace();
                        }
                    }
                }
            }
        }
    }
    // --- Méthode de vérification de la solution de l'utilisateur ---
    private boolean verifySolution()
    {
        // --- Appel de la fonction setElements() pour remplir les matrices que nous allons vérifier ---
        setElements(maGrille);
        // --- Vérification des contraintes entre colonnes et lignes ---
        for(int i = 0; i < dimension; i++)
        {
            for(int j = 0; j < dimension; j++)
            {
                int val = valGrille[i][j];
                if(val != 0) // Si la cellule contient un nombre
                {
                    // --- Vérification des valeurs insérées (ne doivent pas être < à 1 ou > dimension) ---
                    if(val < 1 || val > dimension)
                    {
                        JOptionPane.showMessageDialog(null, "La valeur " + val + " insérée dans la cellule [" + (i+1) + ", " + (j+1) + "] n'appartient pas au domaine des valeurs possibles !");
                        return false;
                    }
                    // --- Comparaison de la valeur avec la colonne ---
                    for(int row = 0; row < dimension; row++)
                    {
                        if(row != i) // Si on n'est pas dans la même ligne, pour ne pas comparer avec la même cellule (même valeur)
                        {
                            if(val == valGrille[row][j]) // Si on trouve une cellule contenant la même valeur
                            {
                                JOptionPane.showMessageDialog(null, "La valeur de la cellule [" + (i+1) + ", " + (j+1) + "] est doublée dans cette colonne (la cellule [" + (row+1) + ", " + (j+1) + "]) !");
                                return false;
                            }
                        }
                    }
                    // --- Comparaison de la valeur avec la ligne ---
                    for(int col = 0; col < dimension; col++)
                    {
                        if(col != j) // Si on n'est pas dans la même colonne, pour ne pas comparer avec la même cellule
                        {
                            if(val == valGrille[i][col]) // Si on trouve un cellule contenant la même valeur
                            {
                                JOptionPane.showMessageDialog(null, "La valeur de la cellule [" + (i+1) + ", " + (j+1) + "] est doublée dans cette ligne (la cellule [" + (i+1) + ", " + (col+1) + "]) !");
                                return false;
                            }
                        }
                    }
                    // --- Vérification des signes entre les cellules horrizontales : > et < ---
                    /* --- Comparaison de la cellule avec la cellule à gauche ---*/
                    if(j != 0) // Puisque la grille des contraintes horizontales est de nbre de colonne = dimension - 1, j doit être >= 1
                    {
                        if(contraintesHoriz[i][j - 1] != ' ') // Si la case contient un signe
                        {
                            if(valGrille[i][j - 1] != 0) // Si la case à gauche contient un nombre
                            {
                                switch(contraintesHoriz[i][j - 1]) // Deux cas : '<' et '>'
                                {
                                    case '>':
                                        if(valGrille[i][j - 1] < val) // Si la valeur est inférieure à la cellule à gauche
                                        {
                                            JOptionPane.showMessageDialog(null, "La valeur " + val + " est > à la valeur " + valGrille[i][j-1] + "\n (cellule [" + (i+1) + ", " + (j) + "] et [" + (i+1) + ", " + (j+1) + "]) !");
                                            return false;
                                        }
                                        break;
                                    case '<':
                                        if(valGrille[i][j - 1] > val) // Si la valeur est supérieure à la cellule à gauche
                                        {
                                            JOptionPane.showMessageDialog(null, "La valeur " + val + " est < à la valeur " + valGrille[i][j-1] + "\n (cellule [" + (i+1) + ", " + (j) + "] et [" + (i+1) + ", " + (j+1) + "]) !");
                                            return false;
                                        }
                                        break;
                                }
                            }
                        }
                    }
                    /* --- Comparaison de la cellule avec la cellule à droite ---*/
                    if(j != dimension - 1) // Puisque la grille des contraintes horizontales est de nbre de colonne = dimension - 1, j doit être < dimension - 1
                    {
                        if(contraintesHoriz[i][j] != ' ') // Si la case contient un signe
                        {
                            if(valGrille[i][j + 1] != 0) // Si la case à droite contient un nombre
                            {
                                switch(contraintesHoriz[i][j]) // Deux cas : '<' et '>'
                                {
                                    case '>':
                                        if( val < valGrille[i][j + 1]) // Si la valeur est inférieure à la cellule à droite
                                        {
                                            JOptionPane.showMessageDialog(null, "La valeur " + val + " est < à la valeur " + valGrille[i][j+1] + "\n (cellule [" + (i+1) + ", " + (j+1) + "] et [" + (i+1) + ", " + (j+2) + "]) !");
                                            return false;
                                        }
                                        break;
                                    case '<':
                                        if(val > valGrille[i][j + 1]) // Si la valeur est supérieure à la cellule à droite
                                        {
                                            JOptionPane.showMessageDialog(null, "La valeur " + val + " est > à la valeur " + valGrille[i][j+1] + "\n (cellule [" + (i+1) + ", " + (j+1) + "] et [" + (i+1) + ", " + (j+2) + "]) !");
                                            return false;
                                        }
                                        break;
                                }
                            }
                        }
                    }
                    // --- Vérification des signes entre les cellules verticales : ^ et v ---
                    /* --- Comparaison de la cellule avec la cellule en haut ---*/
                    if(i != 0) // Puisque la grille des contraintes verticales est de nbre de ligne = dimension - 1, i doit être >= 1
                    {
                        if(contraintesVert[i - 1][j] != ' ') // Si la case contient un signe
                        {
                            if(valGrille[i - 1][j] != 0) // Si la case en haut contient un nombre
                            {
                                switch(contraintesVert[i - 1][j]) // Deux cas : '^' et 'v'
                                {
                                    case '^':
                                        if(valGrille[i - 1][j] > val) // Si la valeur est inférieure à la cellule en haut
                                        {
                                            JOptionPane.showMessageDialog(null, "La valeur " + val + " est < à la valeur " + valGrille[i - 1][j] + "\n (cellule [" + (i) + ", " + (j+1) + "] et [" + (i+1) + ", " + (j+1) + "]) !");
                                            return false;
                                        }
                                        break;
                                    case 'v':
                                        if(valGrille[i - 1][j] < val) // Si la valeur est supérieure à la cellule en haut
                                        {
                                            JOptionPane.showMessageDialog(null, "La valeur " + val + " est > à la valeur " + valGrille[i - 1][j] + "\n (cellule [" + (i) + ", " + (j+1) + "] et [" + (i+1) + ", " + (j+1) + "]) !");
                                            return false;
                                        }
                                        break;
                                }
                            }
                        }
                    }
                    /* --- Comparaison de la cellule avec la cellule en bas ---*/
                    if(i != dimension - 1) // Puisque la grille des contraintes verticales est de nbre de ligne = dimension - 1, j doit être < dimension - 1
                    {
                        if(contraintesVert[i][j] != ' ') // Si la case contient un signe
                        {
                            if(valGrille[i + 1][j] != 0) // Si la case en bas contient un nombre
                            {
                                switch(contraintesVert[i][j]) // Deux cas : '⋀' et '⋁'
                                {
                                    case '^':
                                        if(valGrille[i + 1][j] < val) // Si la valeur est supérieure à la cellule en bas
                                        {
                                            JOptionPane.showMessageDialog(null, "La valeur " + val + " est > à la valeur " + valGrille[i + 1][j] + "\n (cellule [" + (i+1) + ", " + (j+1) + "] et [" + (i+2) + ", " + (j+1) + "]) !");
                                            return false;
                                        }
                                        break;
                                    case 'v':
                                        if(valGrille[i + 1][j] > val) // Si la valeur est inférieure à la cellule en bas
                                        {
                                            JOptionPane.showMessageDialog(null, "La valeur " + val + " est < à la valeur " + valGrille[i + 1][j] + "\n (cellule [" + (i+1) + ", " + (j+1) + "] et [" + (i+1) + ", " + (j+1) + "]) !");
                                            return false;
                                        }
                                        break;
                                }
                            }
                        }
                    }
                }
            }
        }
        return true;
    }
    // --- Méthode de résolution par le backtracking ---
    private void solutionBackracking()
    {
        // --- On récupère les types choisis à utiliser dans le Backtracking ---
        int typeVariable = typeVariableCB.getSelectedIndex();
        switch(typeVariable)
        {
            case 0: // Simple
                Backtracking.withDEGREES = false;
                Backtracking.withMRV = false;
                break;
            case 1: // Degree
                Backtracking.withDEGREES = true;
                Backtracking.withMRV = false;
                break;
            case 2: // MRV
                Backtracking.withDEGREES = false;
                Backtracking.withMRV = true;
                break;
            case 3: // DegreeMRV
                Backtracking.withDEGREES = true;
                Backtracking.withMRV = true;
                break;
        }
        int typeDomaine = typeDomaineCB.getSelectedIndex();
        switch(typeDomaine)
        {
            case 0: // Simple
                Backtracking.withLCV = false;
                break;
            case 1: // LCV
                Backtracking.withLCV = true;
                break;
        }
        int typeAlgo = typeAlgoCB.getSelectedIndex();
        switch(typeAlgo)
        {
            case 0: // Simple
                Backtracking.withFC = false;
                Backtracking.withAC1 = false;
                break;
            case 1: // FC
                Backtracking.withFC = true;
                Backtracking.withAC1 = false;
                break;
            case 2: // AC1
                Backtracking.withFC = false;
                Backtracking.withAC1 = true;
                break;
        }
        G = new Graph();
        // --- Contraintes des lignes ---
        for(int i = 0; i < dimension; i++) // Ligne
        {
            for(int j = 0; j < dimension - 1; j++) // Colonne
            {
                for(int k = j + 1; k < dimension; k++)
                {
                    String val1 = "x" + i + "" + j;
                    String val2 = "x" + i + "" + k;
                    G.addEdge(val1, val2);
                }
            }
        }
        // --- Contraintes des colonnes ---
        for(int i = 0; i < dimension; i++) // Colonne
        {
            for(int j = 0; j < dimension; j++) // Ligne
            { 
                for(int k = j + 1; k < dimension; k++)
                {
                    String val1 = "x" + j + "" + i;
                    String val2 = "x" + k + "" + i;
                    G.addEdge(val2, val1);
                }
            }
        }
        // --- Contraintes des signes ---
        for(int i = 0; i < dimension; i++) // Ligne
        {
            for(int j = 0; j < dimension; j++) // Colonne
            {
                // --- Contraintes verticales ---
                if(i > 0 && (contraintesVert[i - 1][j] == '^' || contraintesVert[i - 1][j] == 'v'))
                {
                    System.out.println("Contrainte verticale trouvée dans la case : " + i + "," + j + " = " + contraintesVert[i - 1][j]);

                    boolean cond = contraintesVert[i - 1][j] != '^';
                    
                    String val1 = cond ? "s" + j + "" + (i-1) : "s" + j + "" + i;
                    String val2 = cond ? "x" + j + "" + i : "x" + j + "" + (i-1);

                    G.addEdge(val2, val1);

                    val1 = val1.replace("s", "x");
                    val2 = val2.replace("x","i");

                    G.addEdge(val1, val2);

                }
                // --- Contraintes Horizontales ---
                if(j < dimension - 1 && (contraintesHoriz[i][j] == '<' || contraintesHoriz[i][j] == '>')){
                    System.out.println("Contrainte horizontale trouvée dans la case : " + i + "," + j + " = " + contraintesHoriz[i][j]);

                    boolean cond = contraintesHoriz[i][j] == '<';

                    String val1 = cond ? "s" + (j+1) + "" + i : "s" + j + "" + i;
                    String val2 = cond ? "x" + j + "" + i : "x" + (j+1) + "" + i;

                    G.addEdge(val2, val1);

                    val1 = val1.replace("s", "x");
                    val2 = val2.replace("x","i");

                    G.addEdge(val1, val2);
                }
            }
        }

        // --- Table des domaines ---
        ST<String, SET<String>> domainTable = new ST<String, SET<String>>();
        // --- Remplissage des domaines ---
        Object[][] domains = new Object[dimension][dimension];
        // --- Initialisation des domaines ---
        for(int i = 0; i < dimension; i++) // Colonne
        {
            for(int j = 0; j < dimension; j++) // Ligne
            {
                domains[i][j] = new SET<String>();
            }
        }
        // --- Attribuer les domaines aux valeurs de la grille
        for(int i = 0; i < dimension; i++) // Colonne
        {
            for(int j = 0; j < dimension; j++) // Ligne
            {
                if(valGrilleInit[i][j] != 0)
                {
                    ((SET<String>)domains[i][j]).add(new String(String.valueOf(valGrilleInit[i][j]))); // Domaine avec une seule valeur (case remplie)
                }
                else
                {
                    for(int k = 1; k <= dimension; k++)
                    {
                        ((SET<String>)domains[i][j]).add(""+k);
                    }
                }
            }
        }
        // --- Ajout des domaines à la table ---
        for(int i = 0; i < dimension; i++) 
        {
            for(int j = 0; j < dimension; j++)
            {
                domainTable.put("x"+i+""+j, ((SET<String>)domains[i][j]));
            }
        }
        // --- Affichage des domaines de chaque cellule ---
        System.out.println("\nLa table des domaines est : ");
        Set<String> keys = (Set<String>) domainTable.getST().keySet();
        keys.forEach((key) -> {
            System.out.println("Le domaine de " + key + " est: " + domainTable.getST().get(key));
        });
        // --- Configuration initiale ---
        config = new ST<String, String>();
        for(int i = 0; i < dimension; i++) // Ligne 
        {
            for(int j = 0; j < dimension; j++) // Colonne
            {
                config.put("x"+i+""+j,""); // Variables non affectées
            }
        }
        // --- Appliquer l'algorithme du Backtracking pour calculer le solution ---
        Backtracking backtracking = new Backtracking(this);
        System.out.println("---------------- Graph ----------------");
        System.out.println(G);
        System.out.println("---------------- Config ---------------");
        for (String s : config)
        {
           System.out.print("(" + s + ", " + config.get(s) + ")");
        }
        ST<String, String> result = backtracking.backtracking(config, domainTable, G);
    }
    private void solutionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solutionBtnActionPerformed
        for(int i = 0; i < dimGrille; i++)
        {
            for(int j = 0; j < dimGrille; j++)
            {
                maGrille[i][j].setForeground(Color.black);
            }
        }
        long tempsDebut = System.currentTimeMillis();
        // --- On appelle la méthode de résolution ---
        solutionBackracking();
        // --- Affichage de la solution ---
        for(int i = 0; i < dimension; i++) // Ligne
        { 
            System.out.println("");    
            for(int j = 0; j < dimension; j++) // Colonne
            {
                maGrille[i*2][j*2].setText(config.get("x"+j+""+i));
                maGrille[i*2][j*2].setEditable(false);
                System.out.print(config.get("x"+i+""+j)+" ");
            }
        }
        grille.repaint();
        solutionBtn.setEnabled(false);
        verifyBtn.setEnabled(false);
        showOneCaseBtn.setEnabled(false);
        restartBtn.setEnabled(true);
        
        long tempsFin = System.currentTimeMillis();
        float seconds = (tempsFin - tempsDebut) / 1000F;
        execTxt.setText(Float.toString(seconds) + " s");
        execTxt.setEditable(false);
    }//GEN-LAST:event_solutionBtnActionPerformed

    private void verifyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verifyBtnActionPerformed
        // --- On appelle la méthode setElements() pour actualiser la grille des valeurs
        // c-à-d récupérer les valeurs ajoutées par l'utilisateur
        setElements(maGrille);
        for(int i = 0; i < dimension; i++)
        {
            for(int j = 0; j < dimension; j++)
            {
                if(valGrille[i][j] == 0)
                {
                    JOptionPane.showMessageDialog(null, "Tu n'as pas encore terminé\nIl y a des cases vides !");
                    System.out.println("Tu n'as pas terminé !");
                    return;
                }
            }
        }
        if(verifySolution())
        {
            JOptionPane.showMessageDialog(null, "Aucune erreur \nFélicitations :)");
            System.out.println("Pas d'erreur :)");
            return;
        }
        else
        {
            System.out.println("Errors !");
            return;
        }
    }//GEN-LAST:event_verifyBtnActionPerformed

    private void restartBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartBtnActionPerformed
        int retour = JOptionPane.showConfirmDialog(this, "Vous allez perdre votre état !\nEtes-vous sûr de vouloir recommencer ?!", "Attention !",JOptionPane.OK_CANCEL_OPTION);
        if(retour == JOptionPane.OK_OPTION)
        {
            for(int i = 0; i < dimGrille; i++)
            {
                for(int j = 0; j < dimGrille; j++)
                {
                    if(i % 2 == 0 && j % 2 == 0)
                    {
                        if(maGrille[i][j].getText().equals(maGrilleInit[i][j].getText()))
                        { }
                        else
                            maGrille[i][j].setText("");
                    }
                }
            }
            grille.repaint();
        }
        else 
        { }
        solutionBtn.setEnabled(true);
        verifyBtn.setEnabled(true);
        showOneCaseBtn.setEnabled(true);
        restartBtn.setEnabled(true);
        execTxt.setText("");
    }//GEN-LAST:event_restartBtnActionPerformed

    private void showOneCaseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showOneCaseBtnActionPerformed
        if(config == null)
            solutionBackracking();
 
        int rand1 = ThreadLocalRandom.current().nextInt(0, dimension);
        int rand2 = ThreadLocalRandom.current().nextInt(0, dimension);

        if(config.get("x"+rand1+""+rand2) != null){

            maGrille[rand1*2][rand2*2].setText(config.get("x"+rand1+""+rand2));
            maGrille[rand1*2][rand2*2].setEditable(false);
        }
    }//GEN-LAST:event_showOneCaseBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MyFutoshikiGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MyFutoshikiGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MyFutoshikiGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyFutoshikiGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MyFutoshikiGame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Choose;
    private javax.swing.JPanel contentPane;
    private javax.swing.JComboBox<String> difficultyCB;
    private javax.swing.JComboBox<String> dimensionGameCB;
    private javax.swing.JLabel execLbl;
    private javax.swing.JTextField execTxt;
    private javax.swing.JPanel grille;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JComboBox<String> modeleCB;
    private javax.swing.JButton restartBtn;
    private javax.swing.JButton showOneCaseBtn;
    private javax.swing.JButton solutionBtn;
    private javax.swing.JComboBox<String> typeAlgoCB;
    private javax.swing.JComboBox<String> typeDomaineCB;
    private javax.swing.JComboBox<String> typeVariableCB;
    private javax.swing.JButton verifyBtn;
    // End of variables declaration//GEN-END:variables
}